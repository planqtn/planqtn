name: License Check

on:
  push:
    branches: [main, develop]
    paths:
      - "pyproject.toml"
      - "app/**/requirements.txt"
      - "app/ui/package.json"
      - "app/planqtn_cli/package.json"
      - "app/supabase/functions/import_map.json"
      - "app/supabase/functions/**/*.ts"
      - "app/supabase/functions/shared/**/*.ts"
      - "licenses/**"
      - ".github/workflows/license-check.yml"

  pull_request:
    branches: [main, develop]
    paths:
      - "pyproject.toml"
      - "app/**/requirements.txt"
      - "app/ui/package.json"
      - "app/planqtn_cli/package.json"
      - "app/supabase/functions/import_map.json"
      - "app/supabase/functions/**/*.ts"
      - "app/supabase/functions/shared/**/*.ts"
      - "licenses/**"
      - ".github/workflows/license-check.yml"
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  license-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      checks: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v1.x

      # Python License Checking
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses
          # Install main project dependencies
          pip install -e .
          # Install API dependencies
          pip install -r app/planqtn_api/requirements.txt
          # Install Jobs dependencies  
          pip install -r app/planqtn_jobs/requirements.txt
          # Install Types dependencies
          pip install -r app/planqtn_types/requirements.txt

      - name: Generate Python license report
        run: |
          pip-licenses --format=csv --output-file=licenses/python-licenses.csv
          pip-licenses --format=plain --output-file=licenses/python-licenses.txt

      - name: Check Python licenses for Apache 2.0 compatibility
        run: |
          python licenses/scripts/check_licenses.py

      # npm License Checking - UI Component
      - name: Install UI dependencies
        run: |
          cd app/ui
          npm install

      - name: Check UI licenses
        run: |
          cd app/ui
          npm install -g license-checker
          license-checker --csv --out ../../licenses/ui-licenses.csv
          license-checker --summary > ../../licenses/ui-licenses-summary.txt

      - name: Check UI licenses for Apache 2.0 compatibility
        run: |
          cd app/ui
          node -e "
          const fs = require('fs');
          const { execSync } = require('child_process');

          // Get license summary
          const summary = execSync('license-checker --summary', { encoding: 'utf8' });

          // Known incompatible licenses
          const incompatible = ['GPL', 'LGPL', 'AGPL', 'CDDL', 'EPL'];
          const review = ['MPL', 'UNKNOWN', 'UNLICENSED'];

          let hasIncompatible = false;
          let hasReview = false;

          const lines = summary.split('\n');
          for (const line of lines) {
              if (line.includes('├─') || line.includes('└─')) {
                  const licensePart = line.split(': ')[0].replace(/[├─└│\s]/g, '');
                  
                  if (incompatible.some(inc => licensePart.includes(inc))) {
                      console.log('❌ INCOMPATIBLE LICENSE FOUND:', licensePart);
                      hasIncompatible = true;
                  }
                  
                  if (review.some(rev => licensePart.includes(rev))) {
                      console.log('⚠️  LICENSE NEEDS REVIEW:', licensePart);
                      hasReview = true;
                  }
              }
          }

          if (hasIncompatible) {
              console.log('❌ UI component has incompatible licenses!');
              process.exit(1);
          }

          if (hasReview) {
              console.log('⚠️  UI component has licenses that need review');
          }

          console.log('✅ UI license check completed successfully!');
          "

      # npm License Checking - CLI Component
      - name: Install CLI dependencies
        run: |
          cd app/planqtn_cli
          npm install

      - name: Check CLI licenses
        run: |
          cd app/planqtn_cli
          license-checker --csv --out ../../licenses/cli-licenses.csv
          license-checker --summary > ../../licenses/cli-licenses-summary.txt

      - name: Check CLI licenses for Apache 2.0 compatibility
        run: |
          cd app/planqtn_cli
          node -e "
          const fs = require('fs');
          const { execSync } = require('child_process');

          // Get license summary
          const summary = execSync('license-checker --summary', { encoding: 'utf8' });

          // Known incompatible licenses
          const incompatible = ['GPL', 'LGPL', 'AGPL', 'CDDL', 'EPL'];
          const review = ['MPL', 'UNKNOWN', 'UNLICENSED'];

          let hasIncompatible = false;
          let hasReview = false;

          const lines = summary.split('\n');
          for (const line of lines) {
              if (line.includes('├─') || line.includes('└─')) {
                  const licensePart = line.split(': ')[0].replace(/[├─└│\s]/g, '');
                  
                  if (incompatible.some(inc => licensePart.includes(inc))) {
                      console.log('❌ INCOMPATIBLE LICENSE FOUND:', licensePart);
                      hasIncompatible = true;
                  }
                  
                  if (review.some(rev => licensePart.includes(rev))) {
                      console.log('⚠️  LICENSE NEEDS REVIEW:', licensePart);
                      hasReview = true;
                  }
              }
          }

          if (hasIncompatible) {
              console.log('❌ CLI component has incompatible licenses!');
              process.exit(1);
          }

          if (hasReview) {
              console.log('⚠️  CLI component has licenses that need review');
          }

          console.log('✅ CLI license check completed successfully!');
          "

      # Deno License Checking - Supabase Functions
      - name: Check Deno dependencies
        run: |
          deno run --allow-net --allow-read --allow-write licenses/scripts/check_deno_licenses.ts

      # Upload license reports as artifacts
      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            licenses/python-licenses.csv
            licenses/python-licenses.txt
            licenses/ui-licenses.csv
            licenses/ui-licenses-summary.txt
            licenses/cli-licenses.csv
            licenses/cli-licenses-summary.txt
            licenses/deno-license-report.txt

      # Create summary comment for PR
      - name: Create license summary
        if: github.event_name == 'pull_request'
        run: |
          echo "## 📋 License Check Summary" > licenses/license-summary.md
          echo "" >> licenses/license-summary.md
          echo "### Python Dependencies" >> licenses/license-summary.md
          echo '```' >> licenses/license-summary.md
          head -20 licenses/python-licenses.txt >> licenses/license-summary.md
          echo '```' >> licenses/license-summary.md
          echo "" >> licenses/license-summary.md
          echo "### UI Component Dependencies" >> licenses/license-summary.md
          echo '```' >> licenses/license-summary.md
          cat licenses/ui-licenses-summary.txt >> licenses/license-summary.md
          echo '```' >> licenses/license-summary.md
          echo "" >> licenses/license-summary.md
          echo "### CLI Component Dependencies" >> licenses/license-summary.md
          echo '```' >> licenses/license-summary.md
          cat licenses/cli-licenses-summary.txt >> licenses/license-summary.md
          echo '```' >> licenses/license-summary.md
          echo "" >> licenses/license-summary.md
          echo "### Deno Dependencies (Supabase Functions)" >> licenses/license-summary.md
          echo '```' >> licenses/license-summary.md
          if [ -f licenses/deno-license-report.txt ]; then head -30 licenses/deno-license-report.txt >> licenses/license-summary.md; else echo "No Deno dependencies found or check failed" >> licenses/license-summary.md; fi
          echo '```' >> licenses/license-summary.md
          echo "" >> licenses/license-summary.md
          echo "📊 **Full license reports are available in the workflow artifacts**"

      - name: Comment PR with license summary
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('licenses/license-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      # Final success message
      - name: License check completed
        run: |
          echo "🎉 License compatibility check completed successfully!"
          echo "All dependencies appear to be compatible with Apache 2.0 license."
          echo "Check the artifacts for detailed license reports."
